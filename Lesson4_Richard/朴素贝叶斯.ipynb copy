{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 朴素贝叶斯法\n",
    "\n",
    "朴素贝叶斯方法是基于贝叶斯定理与特征条件独立假设的分类方法。它是一种生成模型(generative model)，即根据已给样本学习输入X、输出Y的联合分布概率P(X, Y)，然后对于给定的输入x，利用贝叶斯定理计算出后验概率最大的y。朴素贝叶斯方法实现简单，学习和预测的效率比较高。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "假设输入$X \\in R^n$为n维向量集合，即样本$x = (x^{(1)}, x^{(2)}, ..., x^{(n)})$，输出为类标签集$Y$, 即样本标签$y \\in \\ {c_1, c_2, ..., c_k}$，y是其中的一种标签。 X，Y都是随机变量，P(X, Y)是X，Y的联合概率分布。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##  1.后验概率表示"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "朴素贝叶斯分类时，对给定的输入x，通过学习到的模型计算后验概率分布$P(Y=c_k \\mid X = x)$，给定输入x条件下y取$c_k$的概率，将后验概率最大的类作为x的类输出。后验概率的计算可以利用贝叶斯公式：\n",
    "\n",
    "$$ P(Y=c_k \\mid X=x) = \\frac {P(Y=c_k, X=x)} {P(X=x)} = \\frac {P(X=x \\mid Y=c_k) * P(Y=c_k)}{P(X=x)}$$\n",
    "\n",
    "将全概率公式：\n",
    "$$ P(X = x) = \\sum_{i=1}^{k} P(X=x \\mid Y=c_i) * P(Y=c_i)$$\n",
    "\n",
    "代入：\n",
    "$$ P(Y=c_k \\mid X=x) = \\frac {P(X=x \\mid Y=c_k) * P(Y=c_k)}{\\sum_{i=1}^{k} P(X=x \\mid Y=c_i) * P(Y=c_i)}$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "给定的样本里面，$P(Y=c_k)$ 可以计算出来，现在就是需要求$P(X=x \\mid Y=c_k)=P(X=(x^{(1)},x^{(2)},...x^{(n)}) \\mid Y=c_k)$。这个概率直接求解比较麻烦，朴素贝叶斯作了个简化，假定输入x里面各特征值条件独立，也就是输入向量x的条件概率可以写成各特征量条件概率的乘积：\n",
    " \n",
    " $$P(X=x \\mid Y=c_k)=P(X=(x^{(1)},x^{(2)},...x^{(n)}) \\mid Y=c_k) = P(X^{(1)}=x^{(1)} \\mid Y=c_k) * P(X^{(2)}=x^{(2)} \\mid Y=c_k) * \\ ...  \\ * P(X^{(n)}=x^{(n)} \\mid Y=c_k)$$\n",
    " \n",
    " $$P(X=x \\mid Y=c_k) = \\Pi_{j=1}^{n}P(X^{(j)}=x^{(j)} \\mid Y=c_k)$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2.分类器\n",
    "\n",
    "\n",
    "$$ P(Y=c_k \\mid X=x) = \\frac {\\Pi_{j=1}^{n}P(X^{(j)}=x^{(j)} \\mid Y=c_k) * P(Y=c_k)}{\\sum_{i=1}^{k} P(X=x \\mid Y=c_i) * P(Y=c_i)}$$\n",
    "\n",
    "对于每个输入向量x ,因为分母为P(x) 是一定的，所以分类时我们只需要计算分子部分，朴素贝叶斯分类器可以表示为：\n",
    "\n",
    "$$y=f(x)=argmax_{c_k}P(Y=c_k) \\Pi_j{P(X^{(j)}=x^{(j)} \\mid Y=c_k)}$$\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3.举例说明\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "下面我们以一个分类的例子来说明朴素贝叶斯分类过程（参见CSDN[博客](http://blog.csdn.net/jinping_shi/article/details/51771867))：\n",
    "\n",
    "![naive_bayes](pic/naive_bayes2.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "图上有6个训练样本，输入数据有两个特征“症状”和“职业”，输出有3种类型“感冒”、“脑震荡”和“过敏”。令两个特征分布为$X^{(1)}, x^{(2)}$，输出标签分别为$c_1, c_2, c_3$。可以通过样本计算近似先验概率和条件概率：\n",
    "\n",
    "$$P(Y=c_1)= P(Y=\"感冒\") = 3/6 = 1/2$$\n",
    "\n",
    "$$P(Y=c_2)= P(Y=\"脑震荡\") = 2/6 = 1/3$$\n",
    "\n",
    "$$P(Y=c_3)= P(Y=\"过敏\") = 1/6 = 1/6$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "图上有5个文档，其中4个是训练样本$(d_1, d_2, ..., d_4)$，1个是测试样本$d_5$。类标签有两个，“ZH”和“JP”，现在要根据训练样本预测测试样本的标签。\n",
    "\n",
    "### 3.1计算概率\n",
    "\n",
    "首先利用训练样本，令$c_1 = \"ZH\", c_2 = \"JP\"$，则先验概率$P(Y=c_1) = 3/4, P(Y=c_2) = 1/4$。训练样本中，共有6个不同的单词，分布为\"Chinese\", \"Beijing\", \"Shanghai\", \"Macao\", \"Tokyo\", \"Japan\"。这6个单词可以看成是样本空间的6个特征$x^{(1)},...,x^{(6)}$。我们可以通过计算单词频率，然后来计算先验概率和条件概率：\n",
    "\n",
    "$$Count(c_1)=8, \\ Count(c_2) = 3$$\n",
    "$$Count(\"Chinese\")=6，\\ Count(\"Chinese\", c_1)=5, \\ Count(\"Chinese\", c_2)=1$$\n",
    "$$Count(\"Shanghai\")=1, \\ Count(\"Shanghai\", c_1)=1, \\ Count(\"Shanghai\", c_2)=0$$\n",
    "$$Count(\"Beijing\")=1, \\ Count(\"Beijing\", c_1)=1, \\ Count(\"Beijing\", c_2)=0$$\n",
    "$$Count(\"Macao\")=1, \\ Count(\"Macao\", c_1)=1, \\ Count(\"Macao\", c_2)=0$$\n",
    "$$Count(\"Tokyo\")=1, \\ Count(\"Tokyo\", c_1)=0, \\ Count(\"Tokyo\", c_2)=1$$\n",
    "$$Count(\"Japan\")=1, \\ Count(\"Japan\", c_1)=0, \\ Count(\"Japan\", c_2)=1$$\n",
    "\n",
    "条件概率：\n",
    " $$P(x^{(1)} \\mid c_1) = Count(\"Chinese\", c_1)/Count(c_1) = 5/8$$\n",
    " $$P(x^{(1)} \\mid c_2) = Count(\"Chinese\", c_2)/Count(c_2) =1/3$$\n",
    " $$P(x^{(2)} \\mid c_1) = Count(\"Beijing\", c_1)/Count(c_1) = 1/8$$\n",
    "  $$P(x^{(2)} \\mid c_2) = Count(\"Beijing\", c_2)/Count(c_2) = 0$$\n",
    "  $$P(x^{(3)} \\mid c_1) = Count(\"Shanghai\", c_1)/Count(c_1) = 1/8$$\n",
    "  $$P(x^{(3)} \\mid c_2) = Count(\"Shanghai\", c_2)/Count(c_2) = 0/8$$\n",
    "  $$P(x^{(4)} \\mid c_1) = Count(\"Macao\", c_1)/Count(c_1) = 1/8$$\n",
    "   $$P(x^{(4)} \\mid c_2) = Count(\"Macao\", c_2)/Count(c_2) = 0$$\n",
    "     $$P(x^{(5)} \\mid c_1) = Count(\"Tokyo\", c_1)/Count(c_1) = 0$$\n",
    "   $$P(x^{(5)} \\mid c_2) = Count(\"Tokyo\", c_2)/Count(c_2) = 1/3$$\n",
    "        $$P(x^{(6)} \\mid c_1) = Count(\"Japan\", c_1)/Count(c_1) = 0$$\n",
    "   $$P(x^{(6)} \\mid c_2) = Count(\"Japan\", c_2)/Count(c_2) = 1/3$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "现在计算后验概率：\n",
    " \n",
    " $$P(Y=c_k \\mid X=x) = \\frac {P(Y=c_k) \\Pi_{j=1}^6{P(X=x^{(j)} \\mid Y=c_k)}}{P(X=x)}$$\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "代入：\n",
    "$$P(c_1 \\mid X=x) = P(Y=c_1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "样本大小： (150, 5)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>feature1</th>\n",
       "      <th>feature2</th>\n",
       "      <th>feature3</th>\n",
       "      <th>feature4</th>\n",
       "      <th>label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>5.1</td>\n",
       "      <td>3.5</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4.9</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>4.7</td>\n",
       "      <td>3.2</td>\n",
       "      <td>1.3</td>\n",
       "      <td>0.2</td>\n",
       "      <td>setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4.6</td>\n",
       "      <td>3.1</td>\n",
       "      <td>1.5</td>\n",
       "      <td>0.2</td>\n",
       "      <td>setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5.0</td>\n",
       "      <td>3.6</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>setosa</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   feature1  feature2  feature3  feature4   label\n",
       "0       5.1       3.5       1.4       0.2  setosa\n",
       "1       4.9       3.0       1.4       0.2  setosa\n",
       "2       4.7       3.2       1.3       0.2  setosa\n",
       "3       4.6       3.1       1.5       0.2  setosa\n",
       "4       5.0       3.6       1.4       0.2  setosa"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#导入模块\n",
    "import pandas as pd\n",
    "iris = pd.read_csv('iris.csv', header=None)\n",
    "iris.columns = ['feature1', 'feature2', 'feature3', 'feature4', 'label']\n",
    "print('样本大小：', iris.shape)\n",
    "iris.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "输入向量x具有4个特征，样本有三个类别：virginica, setosa, versicolor分别表示为$c_1, c_2, c_3$。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "virginica     50\n",
       "setosa        50\n",
       "versicolor    50\n",
       "Name: label, dtype: int64"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "iris.label.value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "先验概率$P(Y=c_1) = P(Y=c_2) =P(Y=c_3) = 50/150 = 1/3$，条件概率分布：\n",
    "\n",
    "$$P(X^{(1)}=x^{(1)}, .., X^{(4)}=x^{(4)} \\mid Y=c_k)=P(x^{(1)} \\mid Y=c_k) * P(x^{(2)} \\mid Y=c_k) * P(x^{(3)} \\mid Y=c_k) * P(x^{(4)} \\mid Y=c_k)$$\n",
    "\n",
    "$$P(Y=c_k \\mid X=x) = \\frac {P(Y=c_k) \\Pi_{j=1}^{4}(x^{(j)} \\mid Y=c_k)}{P(X=x)}$$\n",
    "\n",
    "$$y=f(x)=argmax_{c_k} \\ P(Y=c_k) \\Pi_{j=1}^{4}(x^{(j)} \\mid Y=c_k) $$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "from sklearn import naive_bayes\n",
    "#help(naive_bayes.MultinomialNB)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "MultinomialNB(alpha=1.0, class_prior=None, fit_prior=True)"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "target_dict = {'setosa': 1, 'virginica': 2, 'versicolor':3}\n",
    "target = iris['label'].map(target_dict)\n",
    "data = iris.drop('label', axis=1)\n",
    "from sklearn.model_selection import train_test_split\n",
    "clf = naive_bayes.MultinomialNB()\n",
    "#划分为训练集和测试集\n",
    "X_train, X_test, y_train, y_test = train_test_split(\n",
    "    data, target, test_size=0.2, random_state=42)\n",
    "clf.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy of prediction: 0.9\n"
     ]
    }
   ],
   "source": [
    "#对测试集预测结果，并计算正确率\n",
    "from sklearn.metrics import accuracy_score\n",
    "#acc = np.mean(clf.predict(X_test) == y_test)\n",
    "acc = accuracy_score(clf.predict(X_test), y_test)\n",
    "print('Accuracy of prediction:', acc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(120, 3)"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf.predict_log_proba(X_train).shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 199.6,  137.6,   58.1,    9.7],\n",
       "       [ 254.8,  115.7,  215.3,   78. ],\n",
       "       [ 242.7,  113.6,  173.9,   54.2]])"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf.feature_count_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([-1.09861229, -1.1239301 , -1.07391968])"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf.class_log_prior_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GaussianNB(priors=None)"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.naive_bayes import GaussianNB\n",
    "clf = GaussianNB()\n",
    "clf.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy of prediction: 1.0\n"
     ]
    }
   ],
   "source": [
    "acc = accuracy_score(clf.predict(X_test), y_test)\n",
    "print('Accuracy of prediction:', acc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
